archlinux-2014.07.03-dual.iso



INSTALL & CONFIG : PART1
========================

0. USB flash? dd bs=4M if=*.iso of=/dev/sd* && sync

1. Disk 
	# cfdisk
		MBR方式选择dos
		GPT方式选择gdt
	# mkfs.* /dev/sd*
	# mkswap /dev/sd* && swapon /dev/sd*

2. Mount
	# lsblk /dev/sd*
	# mount /dev/sd* /mnt
	# mkdir /mnt/data && mount /dev/sd* /mnt/data

3. Install base
	/etc/pacman.d/mirrorlist
	# pacman -Syy
	# pacstrap /mnt base base-devel

4. genfstab -U -p /mnt >> /mnt/etc/fstab

5. arch-chroot /mnt /bin/bash

6. Time
	1) # ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
	2) # hwclock --systohc --utc

7. Locale
	1) /etc/locale.gen
	_____________________
	en_US.UTF-8 UTF-8

	zh_CN.GB18030 GB18030
	zh_CN.GBK GBK
	zh_CN.UTF-8 UTF-8
	zh_CN GB2312
	_____________________

	2) # locale-gen

	
8. mkinitcpio -p linux

9. passwd root

10. Install bootloader
	# pacman -S grub os-prober
	# grub-install --recheck /dev/sda
	# grub-mkconfig -o /boot/grub/grub.cfg

11. Network
	1) hostname
	# echo Arch > /etc/hostname

	2) dhcp
	# systemctl enable dhcpcd.service   # 开机自动连接

	因为默认开启了DHCP服务, 所以写好的DNS将会在下次重启时消失.
	这是因为dhcpd服务刷新了这个文件.
	只需配置/etc/dhcpcd.conf 在末尾加上一句nohook resolv.conf即可,
	dhcpd就不会刷新resolv.conf文件.

12. umount 
	# exit
	# umount -R /mnt

13. reboot



INSTALL & CONFIG : PART2
========================

1. piix4_smbus ****host smbus controller not enabled
	# lsmod | grep i2c_piix4 
	i2c_piix4              12574  0 
	i2c_core               31274  1 i2c_piix4 
	/etc/modprobe.d/blacklist.conf 
	blacklist i2c_piix4 
	# reboot 

2. Users
	1) # useradd -m -s /bin/bash artist
	   # passwd artist

	2) pacman -S sudo

	3) sudo: /etc/sudoers
	__________________________________________
	## Allow root to run any commands anywhere
	root	ALL=(ALL)	ALL
	artist	ALL=(ALL)	NOPASSWD:ALL
	__________________________________________

	4) # userdel -r artist

3.0 pacman
	pacman -Syu	# 同步源, 并更新系统
	pacman -Sy	# 仅同步源 
	pacman -Su	# 更新系统
	pacman -Su --ignore foo	# 升级时不升级包foo 

	pacman -S  pkg	# 从本地数据库中得到pkg的信息, 下载安装pkg包 
	pacman -Sy pkg	# 和源同步后安装名为pkg的包 
	pacman -Sf pkg	# 强制安装包pkg 

	pacman -Ss pkg 	# 搜索有关pkg信息的包 
	pacman -Si pkg	# 从数据库中搜索包pkg的信息 
	pacman -Qi pkg	# 列出已安装的包pkg的详细信息 

	pacman -R   pkg	# 删除pkg包 
	pacman -Rc  pkg # 删除pkg包和依赖pkg的包 
	pacman -Rsc pkg	# 删除pkg包和pkg依赖的包 

	pacman -Sc	# 清理/var/cache/pacman/pkg目录下的旧包 
	pacman -Scc	# 清除所有下载的包和数据库 

	pacman -U  pkg	# 安装下载的abs包, 或新编译的pkg包
	pacman -Sd pkg  # 忽略依赖性问题, 安装包pkg 

3. Upgrade system and pacman's database.
	# pacman -Syu
	1) 出现提示输入: pacman-key --init
	# pacman-key --init
	(
		出现错误及解决方法:
		gpg: Generating pacman keychain master key...
		Not enough random bytes available. Please do some other work to give
		the OS a chance to collect more entropy! (Need 284 more bytes)
		输入后, 出现如上的错误, 解决方法如下:
		$ wget http://aur.archlinux.org/packages/rn/rng-tools/rng-tools.tar.gz
		$ tar zxvf rng-tools.tar.gz
		$ cd rng-tools/
		$ makepkg -s
		# pacman -U rng-tools-3-2-i686.pkg.tar.xz
		安装rngd后, 执行:
		# rngd -f -r /dev/urandom 
		再次执行:
		# pacman-key --init
	)
	2) 如果出现key错误, 修改如下:
	/etc/pacman.conf
	[options]选项下添加: SigLevel = Never

	# pacman-db-upgrade
	# pacman-optimize

4. create ~/.bash_profile

	____________________________________________________________________________________________________
	# PATH
	PATH=$PATH:/usr/local/sbin:/usr/local/bin
	export PATH

	PS1='[\u@\h \W]\$ '
	PS1='\[\033[0;32m\]\A \[\033[0;31m\]\u\[\033[0;34m\] \[\033[00;36m\]\W\[\033[0;33m\] \$\[\033[0m\] '
 
	eval "`dircolors -b`"
	alias ls="ls --color=auto"
	alias dir="dir --color=auto"
	alias vdir="vdir --color=auto"
	alias grep="grep --color=auto"
	alias fgrep="grep --color=auto"
	alias egrep="egrep --color=auto"
	alias ll="ls -l"

	# cvs
	export CVSROOT=:ext:haoj@192.168.99.16:/home/cvsroot
	____________________________________________________________________________________________________

5. X-window

	FLUXBOX
	-------	
	1) First, you'll need the X server: 
	# pacman -S xorg-server 

	2) Install the xorg-xinit package if you want to start X without a display manager: 
	# pacman -S xorg-xinit

	3) Optionally, install twm, xclock and xterm for the default xorg-xinit environment: 
	# pacman -S xorg-twm xorg-xclock xterm

	4) You may also want the useful Xorg utilities: 
	# pacman -S xorg-utils xorg-server-utils 

	5) display driver
	# lspci | grep VGA (查看显卡型号)
	# pacman -S xf86-video
	# pacman -S xf86-video-intel 
	# pacman -S xf86-video-nouveau(开源的, 适合大多数人)
	or:
	NVIDIA:	# pacman -S nvidia
	ATI: 	# pacman -S xf86-video-ati
	or: 
	vmware: # pacman -S xf86-video-vmware

	6) fluxbox
	# pacman -S fluxbox
	# cp /etc/skel/.xinitrc /home/artist/
	
	/home/artist/.xinitrc
	_________________
	exec startfluxbox
	_________________
	
	$ startx

	7) font
	# pacman -S ttf-arphic-uming ttf-arphic-ukai ttf-bitstream-vera

	~/.Xresources
	_______________________________________________
	XTerm*fontMenu*fontdefault*Label: Default
	XTerm*faceName: Bitstream Vera Sans Mono Roman
	XTerm*faceNameDoublesize: WenQuanYi Bitmap Song
	XTerm*faceSize: 10

	XTerm*cjkWidth: true
	XTerm*mkWidth: true
	XTerm*jumpScroll: true
	XTerm*SaveLines: 1000
	XTerm*background: #4D4D4D
	XTerm*foreground: white
	XTerm*scrollbar: true
	_______________________________________________
	$ xrdb .Xresources

	8) slim
	# pacman -S slim

	/etc/inittab
	_________________________________________
	x:5:respawn:/usr/bin/slim >/dev/null 2>&1
	_________________________________________


	GNOME
	-----
	1) First, you'll need the X server: 
	# pacman -S xorg-server 

	2) Install the xorg-xinit package if you want to start X without a display manager: 
	# pacman -S xorg-xinit

	3) Optionally, install twm, xclock and xterm for the default xorg-xinit environment: 
	# pacman -S xorg-twm xorg-xclock xterm

	4) You may also want the useful Xorg utilities: 
	# pacman -S xorg-utils xorg-server-utils 

	5) display driver
	# pacman -S xf86-video-nouveau(开源的, 适合大多数人)
	vmware: # pacman -S xf86-video-vmware

	6) 
	# pacman -S gdm
	# pacman -S gnome

	7) DBUS
	# pacman -S dbus
	/etc/rc.conf
	DAEMONS=(syslog-ng network netfs crond dbus)

	8)
	/etc/inittab
	___________________________________
	x:5:respawn:/usr/sbin/gdm -nodaemon
	___________________________________


	Plasma 5(KDE)
	-------------
	1) First, you'll need the X server: 
	# pacman -S xorg-server 
	
	2) plasma
	# pacman -S plasma

	3) Prefer Display Manager(sddm) to xorg-xinit(startx)
	# pacman -S sddm
	# sddm --example-config > /etc/sddm.conf

	/etc/sddm.conf
	______________________
	[Autologin]
	User=
	Session=plasma.desktop
	______________________

	# systemctl enable sddm(开机启动X)


6. xmanager
	/etc/gdm/custom.conf
	__________________
	[daemon]
 
	[security]

	[xdmcp]
	Enable=true
	DisplaysPerHost=10
	Port=177
 
	[greeter]
	Browser=true
 
	[chooser]
 
	[debug]
	__________________
	

7. clean /var/cache/pacman/pkg/*.pkg.tar.xz
	# pacman -Scc
	# pacman -Sc


8. ntpd
	server: vi /etc/ntp.conf
		/etc/init.d/ntpd restart
	client: ntpdate servip
		crontab -e
		0 3 * * * /usr/sbin/ntpdate servip (每天早上3点定期执行)



INSTALL & CONFIG : PART3
========================

0. Grub
	0) # grub
	1) grub> find /boot/grub/stage1
	2) grub> root (hd0, X)
	3) grub> setup(hd0) # Install the grub to MBR.

1. net-tools (ifconfig & route)
	# pacman -S net-tools

2. vim
	# pacman -S vim

3. ctags
	# pacman -S ctags

4. cscope
	1) tar jxvf cscope-15.7a.tar.bz2
	2) ./configure
	3) make 
	4) make install

5. kermit
	1) tar zxvf cku211.tar.gz
	2) make linux
	3) make install
	4) kermrc
		_____________________
		set line /dev/ttyS0
		set speed 9600
		set carrier-watch off
		set handshake none
		set flow-control none
		robust
		set file type bin
		set file name lit
		set rec pack 1000
		set send pack 1000
		set window 5
		_____________________

6. ssh
	# pacman -S openssh
	# systemctl start sshd
	# systemctl enable sshd.service # 开机启动
	
	/etc/ssh/sshd_config
	PermitRootLogin yes	# 允许root登陆
	
	
    	   
7. cvs
	1) tar jxvf cvs-1.12.13.tar.bz2
	1) ./configure 
	2) make
	3) make install

8. ftp-client:
	1) cp ftp /usr/local/bin
	2) cp libreadline.so.5 /usr/lib
	3) cp libtinfo.so.5 /lib

9. ncftp-client:
	1) tar jxvf ncftp-3.2.5-src.tar.bz2
	2) ./configure
	3) make
	4) make install
	5) Eg: 将本地local/目录内的所有文件和目录, 上传到FTP服务器的Ftp/目录内(如果不存在Ftp/目录则自动创建).
          /usr/local/ncftp/bin/ncftpput -u FTP帐号 -p FTP密码 -P FTP端口 -m -R servip Ftp/ local/*

10. tftp:
	1) tar tftp-hpa-5.0.tar.bz2
	2) ./configure 
	3) make
	4) make install
	5) /etc/xinetd.d/tftp
		__________________________________________________________
		service tftp
		{
			disable			= no
			socket_type		= dgram
			protocol		= udp
			wait			= yes
			user			= root
			server			= /usr/local/sbin/in.tftpd
			server_args		= -s /tftpboot
			per_source		= 11
			cps			= 100 2
			flags			= IPv4
		}   
		__________________________________________________________

	6) /etc/hosts.allow
		______________
		tftpd: ALL
		in.tftpd: ALL
		______________

	7) /etc/rc.d/xinetd restart
	8) netstat -a | grep tftp



COMPILE REDBOOT
===============

	1) cp libtcl.so /usr/lib
	2) cp libstdc++-libc6.1-1.so.2 /usr/lib
	3) vi ~/.bash_profile
		export PATH=${PATH}:/home/src/bootloader/x86/i386-elf/bin
		export _POSIX2_VERSION=199209
