<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="content-type" content="text/html;charset=utf-8"/>
    <meta name="viewport" content="initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no, width=device-width" />
    <meta content="telephone=no" name="format-detection">
    <meta name="apple-mobile-web-app-capable">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta name="description" content="nginx中的变量在nginx中的使用非常的多，正因为变量的存在，使得nginx在配置上变得非常灵活。
我们知道，在nginx的配置文件中，配合变量，我们可以动态的得到我们想要的值。最常见的使用是，我们在写[代码片段]的格式时，需要用到多很多变量。
而这些变量是如何工作的呢？我们可以输出哪些变量？我们又怎么才能输出自己想要的内容呢？当然，我们可能还想知道，如何在我们的模块里面去使用变量，如何添加变"/>
    <meta name="keywords" content="源码,nginx,变量 nginx源码分析之变量"/>
    <title>nginx源码分析之变量 - 为程序员服务</title>
    <link href="http://outofmemory.cn/v5/s/5/17.1.css" type="text/css" rel="stylesheet"/>
    
    <link rel="shortcut icon" href="http://outofmemory.cn/favicon.ico" type="image/x-icon" >
    
</head>
<body>

<header class="head">
<div class="head-left">
    <div class="logo"><a href="http://outofmemory.cn/">OutOfMemory.CN</a></div>
    <div class="beta"><sup>β</sup></div>
    <div class="nav">
        <ul id="headNav">
            <li  class="current"><a href="http://ju.outofmemory.cn/" title="聚客：编程技术网站牛人牛博聚集地">聚客</a></li>
            <li ><a href="http://outofmemory.cn/code-snippet/" title="代码：分享代码 分享经验">代码</a></li>
            <li ><a href="http://j.outofmemory.cn/" title="技术专栏，精华">专栏</a></li>
            <li><a href="http://outofmemory.cn/tutorial/" title="简单易学的技术教程">教程</a></li>
            <li style="width:65px"><a href="http://maven.outofmemory.cn/" title="Maven信息库速查">Maven</a></li>
            <li ><a  href="http://outofmemory.cn/github/" title="Github上的中国开源人">Gitter</a></li>
            <li ><a href="http://outofmemory.cn/tag/" title="标签">标签</a></li>
        </ul>
    </div>
</div>
<div class="head-right">
<div class="userStatus">
    <a class="signin" target="_self" href="http://outofmemory.cn/user/login"><i></i><b>登录</b></a><a class="signup" target="_self" href="http://outofmemory.cn/user/register"><i></i><b>注册</b></a>
</div>
</div>
</header>


<div class="wrap">
<div class="content"><h1>nginx源码分析之变量</h1>
<div class="meta">
    <a href="http://ju.outofmemory.cn/feed/479/" title="李子的博客"><i class="ico man"></i>李子的博客</a>
    <time><i class="ico date"></i>2011-12-17</time>
    <span class="pv"><b>602</b> 阅读</span>
</div>
<div class="tags">
<a class="tag" href="http://ju.outofmemory.cn/tag/%E6%BA%90%E7%A0%81/">源码</a>

<a class="tag" href="http://ju.outofmemory.cn/tag/nginx/">nginx</a>

<a class="tag" href="http://ju.outofmemory.cn/tag/%E5%8F%98%E9%87%8F/">变量</a>

</div>

<script>
    function imgError(img){
        if (typeof img.hasReplaceSrc != 'undefined'){
            var refer = $('div.author a:last').attr('href');
            img.src = '/imgr?src=' + encodeURIComponent(img.src) + '&r=' + encodeURIComponent(refer);
        } else {
            var urlPattern = /(http|ftp|https):\/\/[\w-]+(\.[\w-]+)+([\w.,@?^=%&amp;:\/~+#-]*[\w@?^=%&amp;\/~+#-])?/;
            for (var i=0;i<img.attributes.length;i++){
                var attrName = img.attributes[i].nodeName;
                var attrVal = img.attributes[i].nodeValue;
                if(attrName.toLowerCase() != 'src' && urlPattern.test(attrVal)){
                    img.src = attrVal;
                    img.hasReplaceSrc=true;
                    break;
                }
            }
        }
        return true;
    }
</script>
<p>nginx中的变量在nginx中的使用非常的多，正因为变量的存在，使得nginx在配置上变得非常灵活。</p>
<p>我们知道，在nginx的配置文件中，配合变量，我们可以动态的得到我们想要的值。最常见的使用是，我们在写<code>access_log</code>的格式时，需要用到多很多变量。
而这些变量是如何工作的呢？我们可以输出哪些变量？我们又怎么才能输出自己想要的内容呢？当然，我们可能还想知道，如何在我们的模块里面去使用变量，如何添加变量，获取变量的值，以及设置变量的内容？如何使用，以及需要注意些什么？</p>
<p>问题一大堆，那接下来，就让我们一起去一探nginx源码的秘密。</p>
<p>我要讲的内容</p>
<ol>
<li>变量的分类</li>
<li>相关结构</li>
<li>模块中操作变量的函数</li>
<li>变量的实现源码及流程</li>
</ol>
<h2>1. 变量的分类</h2>
<p>站在使用者的角度来看，我们在配置文件中可以看到：</p>
<ol>
<li>set添加的变量(变量名由用户设定)</li>
<li>nginx功能模块中添加的变量，如geo模块(变量名由用户设定)</li>
<li>nginx内建的变量(变量名已由nginx设定好，可以看<code>ngx_http_core_variables</code>结构)</li>
<li>有一定规则的变量，如”<code>http_host</code>”等(有相同前缀，表示某一类变量)，我们就称为规则变量吧</li>
</ol>
<p>从这里，也解决我们的问题，在配置<code>access_log</code>时，我们可以配置哪些变量，是否是用户添加的变量，是否是内建变量在<code>ngx_http_core_variables</code>中有，其次，是否是规则变量，另外，如果想输出自己的内容，那只能写模块自己添加一个变量了，或者hack nginx在<code>ngx_http_core_variables</code>中添加一个变量。</p>
more
<p>从nginx内部实现上来看，变量可分为：</p>
<ol>
<li>hash过的变量</li>
<li>未hash过的变量，变量有设置<code>NGX_HTTP_VAR_NOHASH</code></li>
<li>未hash过的变量，但有一定规则的变量，如以这些串开头的：”<code>http_</code>”,”<code>sent_http_</code>”,”<code>upstream_http_</code>”,”<code>cookie_</code>”,”<code>arg_</code>”</li>
</ol>
<p>我们在模块里面可以通过<code>ngx_http_add_variable</code>来添加一个变量，在后面的介绍中我们可以看到。而我们添加的变量，最好不要是以这些规则开头的变量，否则就有可能会覆盖掉这些规则的变量。</p>
<p>从变量获取者来看，可以分为索引变量与未索引的变量。</p>
<ol>
<li>索引变量，我们通过<code>ngx_http_get_variable_index</code>来获得一个索引变量的索引号。然后可以通过<code>ngx_http_get_indexed_variable</code>与<code>ngx_http_get_flushed_variable</code>来获取索引过变量的值。如果要索引某个变量，则只能在配置文件初始化的时候来设置。<code>ngx_http_get_variable_index</code>不会添加一个真正的变量，在配置文件初始化结束时，会检查该变量的合法性。索引过的变量，将会有缓存等特性(缓存在<code>r-&gt;variables</code>中)。</li>
<li>未索引过的变量，则只能通过<code>ngx_http_get_variable</code>来获取变量的值。</li>
</ol>
<h2>2. 相关结构</h2>
<p>接下来，我们就要开始进入源码的世界了，先看看几个关键结构：</p>
<pre><code>// ngx_variable_value_t即变量的结果，变量的值
typedef struct {
    unsigned    len:28;     
    unsigned    valid:1;    // 当前变量是否合法
    unsigned    no_cacheable:1; // 当前变量是否可以缓存，缓存过的变量将只会调用一次get_handler函数
    unsigned    not_found:1;// 变量是否找到
    unsigned    escape:1;
    u_char     *data;       // 变量的数据
} ngx_variable_value_t;
// 变量本身的信息
struct ngx_http_variable_s {
    ngx_str_t                     name;     // 变量的名称
    ngx_http_set_variable_pt      set_handler;  // 变量的设置函数
    ngx_http_get_variable_pt      get_handler;  // 变量的get函数
    uintptr_t                     data;     // 传给get与set_handler的值
    ngx_uint_t                    flags;    // 变量的标志
    ngx_uint_t                    index;    // 如果有索引，则是变量的索引号
};
// 在ngx_http_core_module的配置文件中保存了所使用的变量信息
typedef struct {
    ngx_hash_t                 variables_hash;     // 变量的hash表
    ngx_array_t                variables;         // 索引变量的数组
    ngx_hash_keys_arrays_t    *variables_keys;       // 变量的hash数组
} ngx_http_core_main_conf_t;
// 变量在每个请求中的值是不一样的，也就是说变量是请求相关的
// 所以在ngx_http_request_s中有一个变量数组，主要用于缓存当前请求的变量结果
// 从而可以避免一个变量的多次计数，计算过一次的变量就不用再计算了
// 但里面保存的一定是索引变量的值，是否缓存，也要由变量的特性来决定
struct ngx_http_request_s {
    ngx_http_variable_value_t        *variables;
}
</code></pre>
<h2>3. 模块中操作变量的函数</h2>
<p>那么，在模块中，我们要如何使用一个变量呢？在前面讲分类的时候，我们也提到过了，这里再总结并细说一下：
首先，如果要添加一个变量，我们需要调用<code>ngx_http_add_variable</code>函数来添加一个变量。添加时需要指明变量的名称就行了。</p>
<pre><code>// name: 即变量的名字
// flags: 如果同一个变量要多次添加，则flags应该设置NGX_HTTP_VAR_CHANGEABLE
// 否则，多次添加将会提示重复
// flags表示可以是：NGX_HTTP_VAR_CHANGEABLE
//                 NGX_HTTP_VAR_NOCACHEABLE
//                 NGX_HTTP_VAR_INDEXED
//                 NGX_HTTP_VAR_NOHASH
ngx_http_variable_t *ngx_http_add_variable(ngx_conf_t *cf, ngx_str_t *name, ngx_uint_t flags);
</code></pre>
<p>然后，要获取变量，如果要高效一点，我们可以先将该变量放到索引数组里面，通过<code>ngx_http_get_variable_index</code>来添加一个变量的索引：</p>
<pre><code>// name: 即nginx支持的任意变量名
// 返回该变量的索引
ngx_int_t ngx_http_get_variable_index(ngx_conf_t *cf, ngx_str_t *name);
</code></pre>
<p>不过，要注意的是，添加的变量必须是nginx支持的已存在的变量。即如果是hash过的变量，则一定是通过<code>ngx_http_add_variable</code>添加的变量，否则，一定是规则变量，如”<code>http_host</code>”。当然，在解析配置文件的时候，变量不一定是要先通过<code>ngx_http_add_variable</code>然后才能获取索引，这个是不需要有顺序保证的。nginx会将在最后配置文件解析完成后，去验证这些索引变量的合法性，在<code>ngx_http_variables_init_vars</code>函数中可以看到，我们在后面具体再分析。
所以，可以看到，获取索引的操作，一定是要在解析配置文件的过程是进行的， 一旦配置文件解析完成后，索引变量不能再添加。在获取索引号后，我们需要保存该索引号，以便在后面通过索引号来获取变量。</p>
<p>那么，索引变量的获取，可以通过<code>ngx_http_get_indexed_variable</code>与<code>ngx_http_get_flushed_variable</code>来获取，两个函数间的区别，我们后面再介绍：</p>
<pre><code>ngx_http_variable_value_t *ngx_http_get_indexed_variable(ngx_http_request_t *r, ngx_uint_t index);  
ngx_http_variable_value_t *ngx_http_get_flushed_variable(ngx_http_request_t *r, ngx_uint_t index);  
</code></pre>
<p>而如果没有索引过的变量，则只能通过<code>ngx_http_get_variable</code>函数来获取了。</p>
<pre><code>// key 由ngx_hash_strlow来计算  
ngx_http_variable_value_t *ngx_http_get_variable(ngx_http_request_t *r, ngx_str_t *name, ngx_uint_t key);  
</code></pre>
<p>可以看到，key是通过ngx_hash_strlow来计算的，所以变量名是没有大小写区分的。</p>
<p>最后，通过获取变量的函数，我们可以看到，变量是与请求相关的，也就是获取的变量都是与当前请求相关的。</p>
<h2>4. 变量的实现源码及流程</h2>
<p>那接下来，我们就来看看nginx在源码中的实现吧！</p>
<p><em>初始化</em>：</p>
<p>首先，在数据结构中，我们知道<code>ngx_http_core_main_conf_t</code>中保存了变量相关的一些信息，我们添加的变量key放在<code>cmcf-&gt;variables_keys</code>中，而cmcf-&gt;variables保存变量的索引结构，<code>cmcf-&gt;variables_hash</code>则保存着变量hash过的结构。</p>
<p><code>ngx_http_add_variable</code>添加变量的时候，会先放到<code>cmcf-&gt;variables_keys</code>中，然后在解析完后，再生成hash结构体。</p>
<p>那么，<code>ngx_http_core_module</code>的preconfiguration阶段，调用<code>ngx_http_variables_add_core_vars</code>初始化变量的数据结构，然后再添加<code>ngx_http_core_variables</code>结构中的变量。所以可以看出，nginx中内建的变量是在这个数组里面的。
然后在解析其它模块的配置文件时，会通过<code>ngx_http_add_variable</code>函数来添加变量：</p>
<pre><code>ngx_http_variable_t *
ngx_http_add_variable(ngx_conf_t *cf, ngx_str_t *name, ngx_uint_t flags)
{
    // 先检查变量是否在已添加
    key = cmcf-&gt;variables_keys-&gt;keys.elts;
    for (i = 0; i &lt; cmcf-&gt;variables_keys-&gt;keys.nelts; i++) {
        if (name-&gt;len != key[i].key.len
                || ngx_strncasecmp(name-&gt;data, key[i].key.data, name-&gt;len) != 0)
        {
            continue;
        }
        v = key[i].value;
        // 如果已添加，并且是不可变的变量，则提示变量的重复添加
        // 其它NGX_HTTP_VAR_CHANGEABLE就是为了让变量的重复添加时不出错，都指向同一变量
        if (!(v-&gt;flags &amp; NGX_HTTP_VAR_CHANGEABLE)) {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                    "the duplicate \"%V\" variable", name);
            return NULL;
        }
        // 如果变量已添加，并且有NGX_HTTP_VAR_CHANGEABLE表志，则直接返回
        return v;
    }
    // 添加这个变量
    v = ngx_palloc(cf-&gt;pool, sizeof(ngx_http_variable_t));
    v-&gt;name.len = name-&gt;len;
    // 注意，变量名不区分大小写
    ngx_strlow(v-&gt;name.data, name-&gt;data, name-&gt;len);
    rc = ngx_hash_add_key(cmcf-&gt;variables_keys, &amp;v-&gt;name, v, 0);
    if (rc == NGX_ERROR) {
        return NULL;
    }
    return v;
}
</code></pre>
<p>在添加完变量后，我们需要设置变量的<code>get_handler</code>与<code>set_handler</code>。<code>get_handler</code>是当我们在获取变量的时候调用的函数，在该函数中，我们需要设置变量的值。而在<code>set_handler</code>则是用于主动设置变量的值。<code>get_handler</code>与<code>set_handler</code>的区别是：<code>get_handler</code>是在变量使用时获取值，而<code>set_handler</code>则是变量会主动先设置好，在使用的时候就不用再算了。目前，<code>set</code>指令，设置一个变量的值是用的<code>set_handler</code>。
在需要获取变量的模块中，可以通过<code>ngx_http_get_variable_index</code>来得到变量的索引，这个函数工作很简单，就是在<code>ngx_http_core_main_conf_t</code>的variables中添加一个变量，并返回该变量在数组中的索引号。源码就不展示了。然后，在解析配置文件之后，在<code>ngx_http_block</code>中通过<code>ngx_http_variables_init_vars</code>函数来初始化变量，在<code>ngx_http_variables_init_vars</code>中，会做两个事情，检查索引变量，以及初始化变量的hash表。首先，对索引数组中的每一个元素，会先检查是否在<code>ngx_http_core_main_conf_t</code>的<code>variables_keys</code>中出现，即是否是添加过的，然后再检查是否是有特定规则的变量，如”<code>http_host</code>”，如果都不是，则说明该变量是不存在的，该索引会对应于一个不存在的变量，所以就会提示错误，程序无法启动。然后，如果变量有设置<code>NGX_HTTP_VAR_NOHASH</code>，则会跳过该变量，不进行hash，再对hash过的变量建立hash表。</p>
<p><em>在请求中:</em>
当一个请求过来时，在ngx_http_init_request函数中，即请求初始化的时候，会建立一个与ngx_http_core_main_conf_t中的变量索引数组variables大小一样的数组。r-&gt;variables有两个作用，一是为了缓存变量的值，二是可以在创建子请求时，父请求给子请求传递一些信息。注意，变量的值是与当前请求相关的，所以每个请求里面会不一样。
然后在模块里面ngx_http_get_indexed_variable和ngx_http_get_flushed_variable，这两个函数的代码还是要小讲一下：</p>
<pre><code>ngx_http_variable_value_t *
ngx_http_get_indexed_variable(ngx_http_request_t *r, ngx_uint_t index)
{
    ngx_http_variable_t        *v;
    ngx_http_core_main_conf_t  *cmcf;
    cmcf = ngx_http_get_module_main_conf(r, ngx_http_core_module);
    // 变量已经获取过了，就不再计算变量的值，直接返回
    if (r-&gt;variables[index].not_found || r-&gt;variables[index].valid) {
        return &amp;r-&gt;variables[index];
    }
    // 如果变量是初次获取，则调用变量的get_handler来得到变量值，并缓存到r-&gt;variables中去
    v = cmcf-&gt;variables.elts;
    if (v[index].get_handler(r, &amp;r-&gt;variables[index], v[index].data)
            == NGX_OK)
    {
        if (v[index].flags &amp; NGX_HTTP_VAR_NOCACHEABLE) {
            r-&gt;variables[index].no_cacheable = 1;
        }
        return &amp;r-&gt;variables[index];
    }
    // 变量获取失败，设置为不合法，以及未找到
    // 注意我们在调用完本函数后，需要检查函数的返回值以及这两个属性
    r-&gt;variables[index].valid = 0;
    r-&gt;variables[index].not_found = 1;
    return NULL;
}
ngx_http_variable_value_t *
ngx_http_get_flushed_variable(ngx_http_request_t *r, ngx_uint_t index)
{
    ngx_http_variable_value_t  *v;
    v = &amp;r-&gt;variables[index];
    if (v-&gt;valid) {
        // 变量已经获取过了，而且是合法的并且可缓存的，则直接返回
        if (!v-&gt;no_cacheable) {
            return v;
        }
        // 否则，清除标志，并再次获取变量的值
        v-&gt;valid = 0;
        v-&gt;not_found = 0;
    }
    return ngx_http_get_indexed_variable(r, index);
}
</code></pre>
<p>注意：<code>ngx_http_get_flushed_variable</code>会考虑到变量的cache标志，如果变量是可缓存的，则只有在变量是合法的时才返回变量的值，否则重新获取变量的值。而<code>ngx_http_get_indexed_variable</code>则不管变量是否可缓存，只要获取过一次了，不管是否成功，则都不会再获取了。最后，如果是未索引的变量，我们可以通过<code>ngx_http_get_variable</code>函数来得到变量的值。<code>ngx_http_get_variable</code>做的工作：</p>
<ol>
<li>变量是hash过的，而且变量有索引过，则调用<code>ngx_http_get_flushed_variable</code>来得到变量值。</li>
<li>变量hash过，未索引过，则调用变量的<code>get_handler</code>来获取变量，注意，此时每次调用变量，都将会调用<code>get_handler</code>来计算变量的值，然后返回该值。注意因为只有索引过的变量的值才会缓存到<code>ngx_http_request_t</code>的variables中去，所以变量的添加方要注意，如果当前变量是可缓存的，要将该变量建立索引，即调用完<code>ngx_http_add_variable</code>后，再调用<code>ngx_http_get_variable_index</code>来将该变量建立索引。</li>
<li>特定规则的变量，”http_”开头的会调用<code>ngx_http_variable_unknown_header_out</code>函数，”<code>upstream_http_</code>”开头的会调用<code>ngx_http_upstream_header_variable</code>函数，”cookie_”开头的会调用<code>ngx_http_variable_cookie</code>函数，”arg_”开头的会调用<code>ngx_http_variable_argument</code>函数。</li>
<li>变量未找到，设置变量</li>
</ol>
<p>至此，变量的整个流程差不多就完了，另外还有一个要注意的是，在创建子请求时候的变量。在<code>ngx_http_subrequest</code>函数中，我们可以看到，子请求的variables是直接指向父请求的variables数组的，所以子请求与父请求是共享variables数组的，这样父子请求就可以传递变量的值。但正因为如此，我们在使用父子请求的时候会产生一些问题，如果一个父请求创建多个子请求，他们之间获取同一个变量时，会有很明显的干扰，因为每个请求的环境是不一样的，这样获取的值也是不一样的。</p>
<p>好吧，变量也简单的介绍了一下。</p>
<div class="like">
    <a href="javascript:void(0)" class="assertLogin" rel="nofollow" target="_self">点赞</a>
</div>
<div class="tags">
<a class="tag" href="http://ju.outofmemory.cn/tag/%E6%BA%90%E7%A0%81/">源码</a>

<a class="tag" href="http://ju.outofmemory.cn/tag/nginx/">nginx</a>

<a class="tag" href="http://ju.outofmemory.cn/tag/%E5%8F%98%E9%87%8F/">变量</a>

</div>

<div class="author">
    <span class="name">作者：<a href="http://ju.outofmemory.cn/feed/479/" title="李子的博客">李子的博客</a></span>
    <div class="authorAvatar">
        <a href="http://ju.outofmemory.cn/feed/479/">
            <img width="128" align="center" valign="absmiddle" src="http://ju.outofmemory.cn/flogos/9/479.png" alt="李子的博客"/>
        </a>
    </div>
    <div class="small">
    </div>
    <div class="small">原文地址：<a rel="nofollow external" target="_blank" href="http://blog.lifeibo.com/blog/2011/12/17/nginx-varibles.html">nginx源码分析之变量</a>, 感谢原作者分享。</div>
</div>

<div class="pn">
    <span class="next"><mark>→</mark><a href="/entry/7196">nginx中slab分配大内存的陷阱</a></span>
    <span class="pre"><mark>←</mark><a href="/entry/7194">端口重用引发的悲剧</a></span>
</div>
<div class="tgBD">
<script type="text/javascript">

var cpro_id = "u2191912"
</script>
<script src="http://cpro.baidustatic.com/cpro/ui/cm.js" type="text/javascript"></script>
</div>

<div class="comments">
<a name="comments"></a>
</div>


<div class="newComment"><a name="newComment"></a>
<h3>发表评论</h3>
<form action="/entry/comment/add" method="POST">
    <input type="hidden" name="targetId" value="7195"/>
    <input type="hidden" name="title" value="回复:nginx源码分析之变量"/>
    <input type="hidden" name="replyId"/>
    <textarea name="content" cols="100" rows="6" class="mdInput" style="width:98%"></textarea>
    <p>
        <button type="button" id="btnComment">发表评论</button><span id="commentTip"></span>
    </p>
</form>
</div>




</div>
<div class="sidebar">
    <div class="similar entry">
    <span class="title">您可能感兴趣的博客</span>
    <div><ul class="similarEntries">
    <li><span class="meta"><a href="http://ju.outofmemory.cn/feed/479/" title="">博主</a> 发表 <span class="time">2011-12-17 10:51:00</span></span>
<a href="http://ju.outofmemory.cn/entry/7195" class="codeTitle">nginx源码分析之变量</a>
</li>
    <li><span class="meta"><a href="http://ju.outofmemory.cn/feed/4622/" title="博主">博主</a> 发表 <span class="time">2014-03-15 09:25:00</span></span>
<a href="http://ju.outofmemory.cn/entry/184531" class="codeTitle">nginx built-in variables (nginx 内置的变量)</a>
</li>
    <li><span class="meta"><a href="http://ju.outofmemory.cn/feed/2821/" title="">博主</a> 发表 <span class="time">2014-04-17 11:32:00</span></span>
<a href="http://ju.outofmemory.cn/entry/141893" class="codeTitle">nginx源码阅读之 从启动到接受第一个http请求</a>
</li>
    <li><span class="meta"><a href="http://ju.outofmemory.cn/feed/4702/" title="博主">博主</a> 发表 <span class="time">2014-09-24 09:38:57</span></span>
<a href="http://ju.outofmemory.cn/entry/233372" class="codeTitle">Nginx源码分析之启动过程</a>
</li>
    <li><span class="meta"><a href="http://ju.outofmemory.cn/feed/4702/" title="博主">博主</a> 发表 <span class="time">2014-07-25 09:08:02</span></span>
<a href="http://ju.outofmemory.cn/entry/233374" class="codeTitle">Nginx源码分析之基本数据结构</a>
</li>
    <li><span class="meta"><a href="http://ju.outofmemory.cn/feed/2576/" title="">博主</a> 发表 <span class="time">2014-12-03 02:29:42</span></span>
<a href="http://ju.outofmemory.cn/entry/135673" class="codeTitle">NGINX变量机制分析</a>
</li>
    <li><span class="meta"><a href="http://ju.outofmemory.cn/feed/2880/" title="博主">博主</a> 发表 <span class="time">2015-05-27 11:25:26</span></span>
<a href="http://ju.outofmemory.cn/entry/178116" class="codeTitle">Nginx源码构建、编译并安装</a>
</li>
    <li><span class="meta"><a href="http://ju.outofmemory.cn/feed/1472/" title="strider">strider</a> 发表 <span class="time">2014-02-21 19:51:00</span></span>
<a href="http://ju.outofmemory.cn/entry/79388" class="codeTitle">关于nginx中的host变量</a>
</li>
    <li><span class="meta"><a href="http://ju.outofmemory.cn/feed/4702/" title="博主">博主</a> 发表 <span class="time">2014-07-25 09:08:02</span></span>
<a href="http://ju.outofmemory.cn/entry/216030" class="codeTitle">Nginx源码分析之基本数据结构</a>
</li>
    <li><span class="meta"><a href="http://ju.outofmemory.cn/feed/4129/" title="chenjiyong">chenjiyong</a> 发表 <span class="time">2015-05-29 02:27:57</span></span>
<a href="http://ju.outofmemory.cn/entry/169974" class="codeTitle">nginx 配置文件里面 怎么设置 时间变量</a>
</li>
    <li><span class="meta"><a href="http://ju.outofmemory.cn/feed/1263/" title="">博主</a> 发表 <span class="time">2012-05-07 16:00:00</span></span>
<a href="http://ju.outofmemory.cn/entry/61910" class="codeTitle">通过lua统计nginx内部变量数据</a>
</li>
    <li><span class="meta"><a href="http://ju.outofmemory.cn/feed/1843/" title="">博主</a> 发表 <span class="time">2013-12-26 16:00:00</span></span>
<a href="http://ju.outofmemory.cn/entry/103551" class="codeTitle">Nginx中log变量及Tengine的log_unescape</a>
</li>
</ul>
</div>
</div>




    <div class="tgSide"><script type="text/javascript">var jd_union_unid="1000081043",jd_ad_ids="512:6",jd_union_pid="CKvGvfKzKxCTjfDcAxoAIMH+guICKgA=";var jd_width=336;var jd_height=280;var jd_union_euid="";var p="BBcEUB5aEwUbNwpfBkgyTUMIRmtKRk9aZV8ETVxNNwpfBkgyeWcXBSJifWVlDFMYfkNLDwxmRRwAYgtZK10WABoBVhlcFzISBlQaWhwCEwJXK2tKRk9aZVA1FDJNQwhGaxUHGgdXE1MUBxIOVxxrFDIiNw%3D%3D";</script><script type="text/javascript" charset="utf-8" src="//u.x.jd.com/static/js/auto.js"></script></div>
    <div class="similar code">
    <span class="title">您可能感兴趣的代码</span>
    <div><ul class="similarCodes">
    <li><span class="time">2012-12-04 13:23:57</span><a href="http://outofmemory.cn/code-snippet/1200/Nginx-virtual-host-configuration-example">Nginx 的虚拟主机配置示例</a> by <a href="//outofmemory.cn/user/115">0晓风残月0</a>
</li>
    <li><span class="time">2013-02-07 09:45:00</span><a href="http://outofmemory.cn/code-snippet/2171/nginx-peizhiwenjian-nginx-conf-xiangxi-explain">nginx配置文件nginx.conf详细解释</a> by <a href="//outofmemory.cn/user/20">甄码农</a>
</li>
    <li><span class="time">2013-05-01 12:06:17</span><a href="http://outofmemory.cn/code-snippet/3095/nginx-bushu-wordpress">nginx 上部署 wordpress</a> by <a href="//outofmemory.cn/user/62">dreamit</a>
</li>
    <li><span class="time">2013-10-04 10:37:22</span><a href="http://outofmemory.cn/code-snippet/4898/C-yanshi-differ-scope-nei-not-interfere-usage-tongming-variable-fanli">C++演示在不同的范围内不冲突使用同名变量的范例</a> by <a href="//outofmemory.cn/user/125">小项</a>
</li>
    <li><span class="time">2014-09-12 10:13:47</span><a href="http://outofmemory.cn/code-snippet/16407/java-nginx-service-program-algorithm-achieve">java nginx监控服务程序调度算法实现</a> by <a href="//outofmemory.cn/user/103">shixiaoliang</a>
</li>
    <li><span class="time">2015-08-02 17:50:09</span><a href="http://outofmemory.cn/code-snippet/37483/setting-process-display-name">设置进程的显示名称</a> by <a href="//outofmemory.cn/user/43">玖夏</a>
</li>
    <li><span class="time">2013-01-17 17:49:54</span><a href="http://outofmemory.cn/code-snippet/1904/Nginx-with-User-Agent-Rewrite-example">Nginx中基于User-Agent的Rewrite实例</a> by <a href="//outofmemory.cn/user/7">金背二郎</a>
</li>
    <li><span class="time">2013-02-16 14:05:10</span><a href="http://outofmemory.cn/code-snippet/2300/python-webpy-purge-nginx-fastcgi-cache-code-achieve">python webpy purge nginx fastcgi cache 代码实现</a> by <a href="//outofmemory.cn/user/7">金背二郎</a>
</li>
    <li><span class="time">2013-05-04 20:10:31</span><a href="http://outofmemory.cn/code-snippet/3133/nginx-shield-mouxie-UserAgent-come-dujue-laji-pachong">nginx屏蔽某些UserAgent，来杜绝垃圾爬虫</a> by <a href="//outofmemory.cn/user/20">甄码农</a>
</li>
    <li><span class="time">2014-01-26 12:01:01</span><a href="http://outofmemory.cn/code-snippet/6831/python-parse-apache-nginx-rizhi-file-output-fangke-ip-list">python分析apache和nginx日志文件输出访客ip列表</a> by <a href="//outofmemory.cn/user/79">凤歌</a>
</li>
    <li><span class="time">2014-10-28 15:51:51</span><a href="http://outofmemory.cn/code-snippet/33899/nginx-post-put-request-display-raiseerror-information-configuration">nginx收到post或者put请求后不再轮询而是直接显示报错信息的配置</a> by <a href="//outofmemory.cn/user/103">shixiaoliang</a>
</li>
    <li><span class="time">2015-08-04 15:03:37</span><a href="http://outofmemory.cn/code-snippet/37588/Nginx-geo-module-achieve-fenbushi-junheng-load">Nginx geo模块 实现分布式均衡负载</a> by <a href="//outofmemory.cn/user/67">Smile_love</a>
</li>
</ul>
</div>
</div>



    
    
    
    
</div>


</div>
<script src="/static/js/jquery-1.11.3.min.js"></script>
<script>var isMobile= $('.sidebar').css('clear') == 'both';</script>
<script src="http://outofmemory.cn/user/loginUser_v5?t=juke&k=7195&oa=getEntryVoteStatus&oa=triggerCommentCaptcha&oa=displayPv&oa=dynamicTG&tg=jukeTopLine" charset="utf-8"></script>
<script src="/static/prettify/prettify.js?1?1.9.0" type="text/javascript"></script>
<script src="http://outofmemory.cn/v5/s/5.js?1.9.0"></script>
<script>
    var removeAD=false;
    var voteTargetType='entry';var voteTargetId =7195;
    var voting=false;
    function onGetVoteStatus(status){
        if(status.type != 0){
            voting=true;
            $('.like a').html('0赞');
        }
    }
    $('.like a').click(function(){
        if (!voting){
            voting = true;
            $.post("/"+voteTargetType+"/"+voteTargetId+"/vote", { type: '1'},
            function (response, textStatus){
                if(!response.success){
                    alert(response.message);
                } else {
                    $('.like a').html((response.upCount||1) + '赞');
                }
            }, "json");
        } else {
            $('.like a').html('已赞');
        }
    });
    $('pre,code').removeClass('prettyprint').addClass('prettyprint');
    prettyPrint();
    function displayPv(pv){
        $('.pv b').html(pv + '');
    }
    function resizeImg(o,maxWidth) {
        var img = $(o);
        if(img.width() > maxWidth) {
            var h = Math.round(maxWidth / img.width() * img.height());
            img.width(maxWidth).height(h);
        }
    }
    function resizeImgs(){
        var maxWidth = $('div.author').width();
        $('.content img').each(
            function(i,o){resizeImg(o,maxWidth);}
        );
        var tg = $('.tgBD');
        if(tg.width()>maxWidth){
            tg.width(maxWidth+'px').css({'text-align':'center','overflow':'hidden',border:'1px solid transparent','border-radius':'2px','-moz-border-radius':'2px'});
        }
    }
    $(resizeImgs);
    $(window).resize(resizeImgs);
    function showBooks(books) {
        var h = '<div class="tgL books"><span>&nbsp;</span>好书：';
        var maxCount = 5;
        var lineCn = books.length>maxCount?maxCount:books.length;
        function getProvidersHtml(b) {
            var h='';
            if (b.providers) {
                h += '[';
                var first = true;
                for (var p in b.providers) {
                    var pUrl = b.providers[p]['url'];
                    
                    if (first) {
                        first = false;
                    } else {
                        h += ' &nbsp; ';
                    }
                    h += ('<a href="' + pUrl +'" target="_blank">' + p +  '</a>');
                    
                }
                h += ']';
            }
            return h;
        }

        for (var i=0; i<lineCn;i++) {
            if (i>0) h += '<span class="sep"> | </span>';
            var book = books[i];
            h += ('<a href="'+ book.url +'" target="_blank">' + book.title + '</a>');
            h += getProvidersHtml(book);
        }


        h += '</div>';
        $(h).insertBefore($('div.wrap'));

        var rightHtml = '<div class="tgSide booksNail"><div class="cTitle">好书推荐</div>';
        rightHtml += '<div><ul>';
        var startIdx = books.length > 4 ? books.length-4 : 0;
        for (var i=startIdx; i<books.length;i++) {
            var book = books[i];
            rightHtml += ('<li><div class="nail"><a href="' + book.url + '" target="_blank"><img src="//outofmemory.cn/static/book/' + book.image + '" /></a></div>');
            rightHtml += ('<div class="title"><a class="bookName" href="'+book.url+'" target="_blank"><nobr>'+book.title+ '</nobr></a>');
            var providerH = getProvidersHtml(book);
            rightHtml += providerH;
            rightHtml += '</div></li>';
        }
        rightHtml += '</ul></div>';
        rightHtml += '</div>';

        $(rightHtml).insertBefore($('div.sidebar div:first'))
    }
</script>
<script src="http://outofmemory.cn/book/list?cb=showBooks&tags=%E6%BA%90%E7%A0%81%2Cnginx%2C%E5%8F%98%E9%87%8F&page=1" type="text/javascript"></script>


<footer class="foot">
&copy; 2015 <a href="http://outofmemory.cn/">内存溢出</a>
</footer>

<script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-36036446-1', 'outofmemory.cn');
    ga('send', 'pageview');
    ga('set',  '&uid', window.loginUser.id); // 使用已登录的 user_id 来设置用户 ID。
</script>

<div class="bdtj"><script type="text/javascript">


var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "//hm.baidu.com/hm.js?2051de3619785a7bff6213250ea9fbbd";
  var s = document.getElementsByTagName("script")[0];
  s.parentNode.insertBefore(hm, s);
})();
</script>
</div>
<script>
    function displayTG(k, h){
        var display = typeof removeAD != 'undefined' && !removeAD;
        if (!display) {
            return;
        }
        if(k == 'jukeTopLine'){
            $(h).insertBefore($('div.wrap'));
        }
    }
    if(parseInt($('.content').css('marginRight')) > 50){
        var contentHeight=$('.content').height();var sideHeight=$('.sidebar').height();
        if(contentHeight<sideHeight) $('.content').css({'minHeight':sideHeight+'px'});
    }
</script>
</body>
</html>
