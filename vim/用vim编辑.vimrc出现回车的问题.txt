用vim 编辑 .vimrc 出现^M的问题 (2011-09-25 18:45:54)

用vim编辑.vimrc，由于之前为了去除C代码中的^M添加了e ++ff=dos
结果wq之后所有的换行符都被替换成了dos格式，所有的命令都不能识别，而换成unix方式，不能批量替换回来（想想也是）用gedit编辑，可以规避此问题。

 

下面转帖一下^M这个该死的东西的来历（转自百度知道）：

有两种情况，会出现打开的文件都显示^M符号： 1. vim被配置为fileformat=unix，而你打开的文件都是dos格式的。unix格式的换行符为0A（ascii码）也就是<LF>，dos格式的换行符为 0D 0A(也就是<CR><LF>)，<CR>其实就显示为^M。下面是详细讲解： DOS, Mac 和Unix格式的文件 回想计算机的史前史，那时的打字机使用两个字符来开始一个新行。 首先是一个字符命令使打印头移回开始位置(回车，<CR>)，然后另一个字 符命令控制向前进纸一行(进纸，<LF>). 在计算机诞生之初，存储设备十分昂贵。于是有人就提出没有必要 用两个字符来表示一行的结束。UNIX一族决定只用进纸一个字符<Line Feed>来表示行尾。来自苹果阵营的人则把回车<CR>作为换行的标 准。MS-DOS(和微软的Windows)仍然决定沿用古老的回车换行<CR><LF>传 统。 这也意味着如果把文件从一个系统移到另一个不同的系统，你就会遇 到与换行相关的问题。Vim编辑器则可以识别这些不同格式的文件。 你可以在'fileformats'选项里指定你希望Vim能自动识别的格式的集 合。下面的这个命令就可以让Vim能自动识别UNIX格式和MS-DOS格式： :set fileformats=unix,dos 把这句话放在_vimrc中，一般情况就都能OK。 2. 你的文本中既有unix的换行符，又有dos的换行符，那么vim会认为你打开的是unix的，所以，那些dos的换行符就会出现恼人的^M。不过这种情况不常见。办法是： 1）若你的vim版本大于7.1，并想用dos显示和保存，如下语句： :e ++ff=dos 2）若你的vim版本小于等于7.1，又想把文章按照dos格式显示和保存，如下语句： :set ff=dos :%s/\r\+$//e 3）若你的vim版本小于等于7.1，又想把文章按照unix格式显示和保存，如下语句： :set ff=unix :%s/\r\+$//e

